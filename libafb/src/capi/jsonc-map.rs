/* automatically generated by rust-bindgen 0.66.1 */


    // -----------------------------------------------------------------------
    //         <- private 'json-c' Rust/C unsafe binding ->
    // -----------------------------------------------------------------------
    //   Do not exit this file it will be regenerated automatically by cargo.
    //   Check:
    //     - build.rs at project root for dynamically mapping
    //     - src/capi/jsonc_map.h for static values
    // -----------------------------------------------------------------------
    

pub type json_bool = ::std::os::raw::c_int;
pub const json_type_json_type_null: json_type = 0;
pub const json_type_json_type_boolean: json_type = 1;
pub const json_type_json_type_double: json_type = 2;
pub const json_type_json_type_int: json_type = 3;
pub const json_type_json_type_object: json_type = 4;
pub const json_type_json_type_array: json_type = 5;
pub const json_type_json_type_string: json_type = 6;
pub type json_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn json_object_get(obj: *mut json_object) -> *mut json_object;
}
extern "C" {
    pub fn json_object_put(obj: *mut json_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_is_type(obj: *const json_object, type_: json_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_get_type(obj: *const json_object) -> json_type;
}
extern "C" {
    pub fn json_object_to_json_string(obj: *mut json_object) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_to_json_string_ext(
        obj: *mut json_object,
        flags: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_to_json_string_length(
        obj: *mut json_object,
        flags: ::std::os::raw::c_int,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_userdata_to_json_string(
        jso: *mut json_object,
        pb: *mut printbuf,
        level: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_new_object() -> *mut json_object;
}
extern "C" {
    pub fn json_object_get_object(obj: *const json_object) -> *mut lh_table;
}
extern "C" {
    pub fn json_object_object_length(obj: *const json_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_object_add(
        obj: *mut json_object,
        key: *const ::std::os::raw::c_char,
        val: *mut json_object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_object_add_ex(
        obj: *mut json_object,
        key: *const ::std::os::raw::c_char,
        val: *mut json_object,
        opts: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_object_get(
        obj: *const json_object,
        key: *const ::std::os::raw::c_char,
    ) -> *mut json_object;
}
extern "C" {
    pub fn json_object_object_get_ex(
        obj: *const json_object,
        key: *const ::std::os::raw::c_char,
        value: *mut *mut json_object,
    ) -> json_bool;
}
extern "C" {
    pub fn json_object_object_del(obj: *mut json_object, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn json_object_new_array() -> *mut json_object;
}
extern "C" {
    pub fn json_object_new_array_ext(initial_size: ::std::os::raw::c_int) -> *mut json_object;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct array_list {
    _unused: [u8; 0],
}
extern "C" {
    pub fn json_object_get_array(obj: *const json_object) -> *mut array_list;
}
extern "C" {
    pub fn json_object_array_length(obj: *const json_object) -> usize;
}
extern "C" {
    pub fn json_object_array_bsearch(
        key: *const json_object,
        jso: *const json_object,
        sort_fn: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut json_object;
}
extern "C" {
    pub fn json_object_array_add(
        obj: *mut json_object,
        val: *mut json_object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_array_put_idx(
        obj: *mut json_object,
        idx: usize,
        val: *mut json_object,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_array_get_idx(obj: *const json_object, idx: usize) -> *mut json_object;
}
extern "C" {
    pub fn json_object_array_del_idx(
        obj: *mut json_object,
        idx: usize,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_array_shrink(
        jso: *mut json_object,
        empty_slots: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_new_boolean(b: json_bool) -> *mut json_object;
}
extern "C" {
    pub fn json_object_get_boolean(obj: *const json_object) -> json_bool;
}
extern "C" {
    pub fn json_object_set_boolean(
        obj: *mut json_object,
        new_value: json_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_new_int(i: i32) -> *mut json_object;
}
extern "C" {
    pub fn json_object_new_int64(i: i64) -> *mut json_object;
}
extern "C" {
    pub fn json_object_new_uint64(i: u64) -> *mut json_object;
}
extern "C" {
    pub fn json_object_get_int(obj: *const json_object) -> i32;
}
extern "C" {
    pub fn json_object_set_int(
        obj: *mut json_object,
        new_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_int_inc(obj: *mut json_object, val: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_get_int64(obj: *const json_object) -> i64;
}
extern "C" {
    pub fn json_object_get_uint64(obj: *const json_object) -> u64;
}
extern "C" {
    pub fn json_object_set_int64(obj: *mut json_object, new_value: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_set_uint64(obj: *mut json_object, new_value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_new_double(d: f64) -> *mut json_object;
}
extern "C" {
    pub fn json_object_new_double_s(d: f64, ds: *const ::std::os::raw::c_char) -> *mut json_object;
}
extern "C" {
    pub fn json_object_double_to_json_string(
        jso: *mut json_object,
        pb: *mut printbuf,
        level: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_get_double(obj: *const json_object) -> f64;
}
extern "C" {
    pub fn json_object_set_double(obj: *mut json_object, new_value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_new_string(s: *const ::std::os::raw::c_char) -> *mut json_object;
}
extern "C" {
    pub fn json_object_new_string_len(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut json_object;
}
extern "C" {
    pub fn json_object_get_string(obj: *mut json_object) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_get_string_len(obj: *const json_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_set_string(
        obj: *mut json_object,
        new_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_set_string_len(
        obj: *mut json_object,
        new_value: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_new_null() -> *mut json_object;
}
extern "C" {
    pub fn json_object_equal(
        obj1: *mut json_object,
        obj2: *mut json_object,
    ) -> ::std::os::raw::c_int;
}
pub type json_c_shallow_copy_fn = ::std::option::Option<
    unsafe extern "C" fn(
        src: *mut json_object,
        parent: *mut json_object,
        key: *const ::std::os::raw::c_char,
        index: usize,
        dst: *mut *mut json_object,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn json_object_deep_copy(
        src: *mut json_object,
        dst: *mut *mut json_object,
        shallow_copy: json_c_shallow_copy_fn,
    ) -> ::std::os::raw::c_int;
}
pub const json_tokener_error_json_tokener_success: json_tokener_error = 0;
pub const json_tokener_error_json_tokener_continue: json_tokener_error = 1;
pub const json_tokener_error_json_tokener_error_depth: json_tokener_error = 2;
pub const json_tokener_error_json_tokener_error_parse_eof: json_tokener_error = 3;
pub const json_tokener_error_json_tokener_error_parse_unexpected: json_tokener_error = 4;
pub const json_tokener_error_json_tokener_error_parse_null: json_tokener_error = 5;
pub const json_tokener_error_json_tokener_error_parse_boolean: json_tokener_error = 6;
pub const json_tokener_error_json_tokener_error_parse_number: json_tokener_error = 7;
pub const json_tokener_error_json_tokener_error_parse_array: json_tokener_error = 8;
pub const json_tokener_error_json_tokener_error_parse_object_key_name: json_tokener_error = 9;
pub const json_tokener_error_json_tokener_error_parse_object_key_sep: json_tokener_error = 10;
pub const json_tokener_error_json_tokener_error_parse_object_value_sep: json_tokener_error = 11;
pub const json_tokener_error_json_tokener_error_parse_string: json_tokener_error = 12;
pub const json_tokener_error_json_tokener_error_parse_comment: json_tokener_error = 13;
pub const json_tokener_error_json_tokener_error_parse_utf8_string: json_tokener_error = 14;
pub const json_tokener_error_json_tokener_error_size: json_tokener_error = 15;
pub type json_tokener_error = ::std::os::raw::c_uint;
extern "C" {
    pub fn json_tokener_get_parse_end(tok: *mut json_tokener) -> usize;
}
extern "C" {
    pub fn json_tokener_error_desc(jerr: json_tokener_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_tokener_get_error(tok: *mut json_tokener) -> json_tokener_error;
}
extern "C" {
    pub fn json_tokener_new() -> *mut json_tokener;
}
extern "C" {
    pub fn json_tokener_new_ex(depth: ::std::os::raw::c_int) -> *mut json_tokener;
}
extern "C" {
    pub fn json_tokener_free(tok: *mut json_tokener);
}
extern "C" {
    pub fn json_tokener_reset(tok: *mut json_tokener);
}
extern "C" {
    pub fn json_tokener_parse(str_: *const ::std::os::raw::c_char) -> *mut json_object;
}
extern "C" {
    pub fn json_tokener_parse_verbose(
        str_: *const ::std::os::raw::c_char,
        error: *mut json_tokener_error,
    ) -> *mut json_object;
}
extern "C" {
    pub fn json_tokener_set_flags(tok: *mut json_tokener, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn json_tokener_parse_ex(
        tok: *mut json_tokener,
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut json_object;
}
pub type lh_entry_free_fn = ::std::option::Option<unsafe extern "C" fn(e: *mut lh_entry)>;
pub type lh_hash_fn = ::std::option::Option<
    unsafe extern "C" fn(k: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ulong,
>;
pub type lh_equal_fn = ::std::option::Option<
    unsafe extern "C" fn(
        k1: *const ::std::os::raw::c_void,
        k2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lh_entry {
    pub k: *const ::std::os::raw::c_void,
    pub k_is_constant: ::std::os::raw::c_int,
    pub v: *const ::std::os::raw::c_void,
    pub next: *mut lh_entry,
    pub prev: *mut lh_entry,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lh_table {
    pub size: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub head: *mut lh_entry,
    pub tail: *mut lh_entry,
    pub table: *mut lh_entry,
    pub free_fn: lh_entry_free_fn,
    pub hash_fn: lh_hash_fn,
    pub equal_fn: lh_equal_fn,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct json_object {
    pub _address: u8,
}
