/* automatically generated by rust-bindgen 0.66.1 */


        // -----------------------------------------------------------------------
        //         <- private 'libafb' Rust/C unsafe binding ->
        // -----------------------------------------------------------------------
        //   Do not exit this file it will be regenerated automatically by cargo.
        //   Check:
        //     - build.rs at project root for dynamically mapping
        //     - src/capi/libafb-map.h for static values
        // -----------------------------------------------------------------------
        

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_EMERGENCY: afb_syslog_levels = 0;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_ALERT: afb_syslog_levels = 1;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_CRITICAL: afb_syslog_levels = 2;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_ERROR: afb_syslog_levels = 3;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_WARNING: afb_syslog_levels = 4;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_NOTICE: afb_syslog_levels = 5;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_INFO: afb_syslog_levels = 6;
pub const afb_syslog_levels_AFB_SYSLOG_LEVEL_DEBUG: afb_syslog_levels = 7;
pub type afb_syslog_levels = ::std::os::raw::c_uint;
pub const afb_auth_type_afb_auth_No: afb_auth_type = 0;
pub const afb_auth_type_afb_auth_Token: afb_auth_type = 1;
pub const afb_auth_type_afb_auth_LOA: afb_auth_type = 2;
pub const afb_auth_type_afb_auth_Permission: afb_auth_type = 3;
pub const afb_auth_type_afb_auth_Or: afb_auth_type = 4;
pub const afb_auth_type_afb_auth_And: afb_auth_type = 5;
pub const afb_auth_type_afb_auth_Not: afb_auth_type = 6;
pub const afb_auth_type_afb_auth_Yes: afb_auth_type = 7;
pub type afb_auth_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_auth {
    pub type_: afb_auth_type,
    pub __bindgen_anon_1: afb_auth__bindgen_ty_1,
    pub next: *const afb_auth,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union afb_auth__bindgen_ty_1 {
    pub text: *const ::std::os::raw::c_char,
    pub loa: ::std::os::raw::c_uint,
    pub first: *const afb_auth,
}
pub const afb_ctlid_afb_ctlid_Root_Entry: afb_ctlid = 0;
pub const afb_ctlid_afb_ctlid_Pre_Init: afb_ctlid = 1;
pub const afb_ctlid_afb_ctlid_Init: afb_ctlid = 2;
pub const afb_ctlid_afb_ctlid_Class_Ready: afb_ctlid = 3;
pub const afb_ctlid_afb_ctlid_Orphan_Event: afb_ctlid = 4;
pub const afb_ctlid_afb_ctlid_Exiting: afb_ctlid = 5;
pub type afb_ctlid = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union afb_ctlarg {
    pub root_entry: afb_ctlarg__bindgen_ty_1,
    pub pre_init: afb_ctlarg__bindgen_ty_2,
    pub orphan_event: afb_ctlarg__bindgen_ty_3,
    pub exiting: afb_ctlarg__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_ctlarg__bindgen_ty_1 {
    pub path: *const ::std::os::raw::c_char,
    pub uid: *const ::std::os::raw::c_char,
    pub config: *mut json_object,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_ctlarg__bindgen_ty_2 {
    pub path: *const ::std::os::raw::c_char,
    pub uid: *const ::std::os::raw::c_char,
    pub config: *mut json_object,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_ctlarg__bindgen_ty_3 {
    pub name: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_ctlarg__bindgen_ty_4 {
    pub code: ::std::os::raw::c_int,
}
pub use self::afb_ctlid as afb_ctlid_t;
pub type afb_ctlarg_t = *const afb_ctlarg;
pub const afb_req_subcall_flags_afb_req_subcall_catch_events: afb_req_subcall_flags = 1;
pub const afb_req_subcall_flags_afb_req_subcall_pass_events: afb_req_subcall_flags = 2;
pub const afb_req_subcall_flags_afb_req_subcall_on_behalf: afb_req_subcall_flags = 4;
pub const afb_req_subcall_flags_afb_req_subcall_api_session: afb_req_subcall_flags = 8;
pub type afb_req_subcall_flags = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_api_x4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_req_x4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_event_x4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_type_x4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_data_x4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_evfd_x4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_timer_x4 {
    _unused: [u8; 0],
}
pub type afb_api_x4_t = *mut afb_api_x4;
pub type afb_req_x4_t = *mut afb_req_x4;
pub type afb_event_x4_t = *mut afb_event_x4;
pub type afb_data_x4_t = *mut afb_data_x4;
pub type afb_type_x4_t = *mut afb_type_x4;
pub type afb_evfd_x4_t = *mut afb_evfd_x4;
pub type afb_timer_x4_t = *mut afb_timer_x4;
pub const afb_type_flags_x4_Afb_Type_Flags_x4_Shareable: afb_type_flags_x4 = 1;
pub const afb_type_flags_x4_Afb_Type_Flags_x4_Streamable: afb_type_flags_x4 = 2;
pub const afb_type_flags_x4_Afb_Type_Flags_x4_Opaque: afb_type_flags_x4 = 4;
pub type afb_type_flags_x4 = ::std::os::raw::c_uint;
pub use self::afb_type_flags_x4 as afb_type_flags_x4_t;
pub type afb_api_callback_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        api: afb_api_x4_t,
        ctlid: afb_ctlid_t,
        ctlarg: afb_ctlarg_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type afb_req_callback_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        req: afb_req_x4_t,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_x4_t,
    ),
>;
pub type afb_call_callback_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        closure: *mut ::std::os::raw::c_void,
        status: ::std::os::raw::c_int,
        nreplies: ::std::os::raw::c_uint,
        replies: *const afb_data_x4_t,
        api: afb_api_x4_t,
    ),
>;
pub type afb_subcall_callback_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        closure: *mut ::std::os::raw::c_void,
        status: ::std::os::raw::c_int,
        nreplies: ::std::os::raw::c_uint,
        replies: *const afb_data_x4_t,
        req: afb_req_x4_t,
    ),
>;
pub type afb_check_callback_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        closure: *mut ::std::os::raw::c_void,
        status: ::std::os::raw::c_int,
        req: afb_req_x4_t,
    ),
>;
pub type afb_event_handler_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        closure: *mut ::std::os::raw::c_void,
        event_name: *const ::std::os::raw::c_char,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_x4_t,
        api: afb_api_x4_t,
    ),
>;
pub type afb_type_converter_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        closure: *mut ::std::os::raw::c_void,
        from: afb_data_x4_t,
        type_: afb_type_x4_t,
        to: *mut afb_data_x4_t,
    ) -> ::std::os::raw::c_int,
>;
pub type afb_type_updater_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        closure: *mut ::std::os::raw::c_void,
        from: afb_data_x4_t,
        type_: afb_type_x4_t,
        to: afb_data_x4_t,
    ) -> ::std::os::raw::c_int,
>;
pub type afb_evfd_handler_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        efd: afb_evfd_x4_t,
        fd: ::std::os::raw::c_int,
        revents: u32,
        closure: *mut ::std::os::raw::c_void,
    ),
>;
pub type afb_timer_handler_x4_t = ::std::option::Option<
    unsafe extern "C" fn(
        timer: afb_timer_x4_t,
        closure: *mut ::std::os::raw::c_void,
        decount: ::std::os::raw::c_uint,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_binding_x4r1_itf {
    pub create_data_raw: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut afb_data_x4_t,
            type_: afb_type_x4_t,
            buffer: *const ::std::os::raw::c_void,
            size: usize,
            dispose: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            closure: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_data_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut afb_data_x4_t,
            type_: afb_type_x4_t,
            pointer: *mut *mut ::std::os::raw::c_void,
            size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_data_copy: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut afb_data_x4_t,
            type_: afb_type_x4_t,
            pointer: *const ::std::os::raw::c_void,
            size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_addref:
        ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t) -> afb_data_x4_t>,
    pub data_unref: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_get_mutable: ::std::option::Option<
        unsafe extern "C" fn(
            data: afb_data_x4_t,
            pointer: *mut *mut ::std::os::raw::c_void,
            size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_get_constant: ::std::option::Option<
        unsafe extern "C" fn(
            data: afb_data_x4_t,
            pointer: *mut *mut ::std::os::raw::c_void,
            size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_update: ::std::option::Option<
        unsafe extern "C" fn(data: afb_data_x4_t, value: afb_data_x4_t) -> ::std::os::raw::c_int,
    >,
    pub data_convert: ::std::option::Option<
        unsafe extern "C" fn(
            data: afb_data_x4_t,
            type_: afb_type_x4_t,
            result: *mut afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_type:
        ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t) -> afb_type_x4_t>,
    pub data_notify_changed: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_is_volatile:
        ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t) -> ::std::os::raw::c_int>,
    pub data_set_volatile: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_set_not_volatile: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_is_constant:
        ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t) -> ::std::os::raw::c_int>,
    pub data_set_constant: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_set_not_constant: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_lock_read: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_try_lock_read:
        ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t) -> ::std::os::raw::c_int>,
    pub data_lock_write: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub data_try_lock_write:
        ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t) -> ::std::os::raw::c_int>,
    pub data_unlock: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub req_logmask:
        ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t) -> ::std::os::raw::c_int>,
    pub req_addref: ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t) -> afb_req_x4_t>,
    pub req_unref: ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t)>,
    pub req_api: ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t) -> afb_api_x4_t>,
    pub req_vcbdata: ::std::option::Option<
        unsafe extern "C" fn(req: afb_req_x4_t) -> *mut ::std::os::raw::c_void,
    >,
    pub req_called_api: ::std::option::Option<
        unsafe extern "C" fn(req: afb_req_x4_t) -> *const ::std::os::raw::c_char,
    >,
    pub req_called_verb: ::std::option::Option<
        unsafe extern "C" fn(req: afb_req_x4_t) -> *const ::std::os::raw::c_char,
    >,
    pub req_vverbose: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            level: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            func: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ),
    >,
    pub req_session_close: ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t)>,
    pub req_session_set_LOA: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            level: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub LEGACY_req_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            replace: ::std::os::raw::c_int,
            createcb: ::std::option::Option<
                unsafe extern "C" fn(
                    closure: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            freecb: ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>,
            closure: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub req_subscribe: ::std::option::Option<
        unsafe extern "C" fn(req: afb_req_x4_t, event: afb_event_x4_t) -> ::std::os::raw::c_int,
    >,
    pub req_unsubscribe: ::std::option::Option<
        unsafe extern "C" fn(req: afb_req_x4_t, event: afb_event_x4_t) -> ::std::os::raw::c_int,
    >,
    pub req_get_client_info:
        ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t) -> *mut json_object>,
    pub req_check_permission: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            permission: *const ::std::os::raw::c_char,
            callback: afb_check_callback_x4_t,
            closure: *mut ::std::os::raw::c_void,
        ),
    >,
    pub req_parameters: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            params: *mut *const afb_data_x4_t,
        ) -> ::std::os::raw::c_uint,
    >,
    pub req_reply: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            status: ::std::os::raw::c_int,
            nreplies: ::std::os::raw::c_uint,
            replies: *const afb_data_x4_t,
        ),
    >,
    pub req_subcall: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            apiname: *const ::std::os::raw::c_char,
            verbname: *const ::std::os::raw::c_char,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
            flags: ::std::os::raw::c_int,
            callback: afb_subcall_callback_x4_t,
            closure: *mut ::std::os::raw::c_void,
        ),
    >,
    pub req_subcall_sync: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            apiname: *const ::std::os::raw::c_char,
            verbname: *const ::std::os::raw::c_char,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
            flags: ::std::os::raw::c_int,
            status: *mut ::std::os::raw::c_int,
            nreplies: *mut ::std::os::raw::c_uint,
            replies: *mut afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub event_addref:
        ::std::option::Option<unsafe extern "C" fn(event: afb_event_x4_t) -> afb_event_x4_t>,
    pub event_unref: ::std::option::Option<unsafe extern "C" fn(event: afb_event_x4_t)>,
    pub event_name: ::std::option::Option<
        unsafe extern "C" fn(event: afb_event_x4_t) -> *const ::std::os::raw::c_char,
    >,
    pub event_push: ::std::option::Option<
        unsafe extern "C" fn(
            event: afb_event_x4_t,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub event_broadcast: ::std::option::Option<
        unsafe extern "C" fn(
            event: afb_event_x4_t,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub type_lookup: ::std::option::Option<
        unsafe extern "C" fn(
            type_: *mut afb_type_x4_t,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub type_register: ::std::option::Option<
        unsafe extern "C" fn(
            type_: *mut afb_type_x4_t,
            name: *const ::std::os::raw::c_char,
            flags: afb_type_flags_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub type_name: ::std::option::Option<
        unsafe extern "C" fn(type_: afb_type_x4_t) -> *const ::std::os::raw::c_char,
    >,
    pub type_set_family: ::std::option::Option<
        unsafe extern "C" fn(type_: afb_type_x4_t, family: afb_type_x4_t) -> ::std::os::raw::c_int,
    >,
    pub type_add_converter: ::std::option::Option<
        unsafe extern "C" fn(
            fromtype: afb_type_x4_t,
            totype: afb_type_x4_t,
            converter: afb_type_converter_x4_t,
            closure: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub type_add_updater: ::std::option::Option<
        unsafe extern "C" fn(
            fromtype: afb_type_x4_t,
            totype: afb_type_x4_t,
            updater: afb_type_updater_x4_t,
            closure: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_logmask:
        ::std::option::Option<unsafe extern "C" fn(api: afb_api_x4_t) -> ::std::os::raw::c_int>,
    pub api_vverbose: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            level: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            func: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ),
    >,
    pub api_name: ::std::option::Option<
        unsafe extern "C" fn(api: afb_api_x4_t) -> *const ::std::os::raw::c_char,
    >,
    pub api_get_userdata: ::std::option::Option<
        unsafe extern "C" fn(api: afb_api_x4_t) -> *mut ::std::os::raw::c_void,
    >,
    pub api_set_userdata: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub api_settings:
        ::std::option::Option<unsafe extern "C" fn(api: afb_api_x4_t) -> *mut json_object>,
    pub api_event_broadcast: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            name: *const ::std::os::raw::c_char,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_new_event: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            name: *const ::std::os::raw::c_char,
            event: *mut afb_event_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_event_handler_add: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            pattern: *const ::std::os::raw::c_char,
            callback: afb_event_handler_x4_t,
            closure: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_event_handler_del: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            pattern: *const ::std::os::raw::c_char,
            closure: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_call: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            apiname: *const ::std::os::raw::c_char,
            verbname: *const ::std::os::raw::c_char,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
            callback: afb_call_callback_x4_t,
            closure: *mut ::std::os::raw::c_void,
        ),
    >,
    pub api_call_sync: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            apiname: *const ::std::os::raw::c_char,
            verbname: *const ::std::os::raw::c_char,
            nparams: ::std::os::raw::c_uint,
            params: *const afb_data_x4_t,
            status: *mut ::std::os::raw::c_int,
            nreplies: *mut ::std::os::raw::c_uint,
            replies: *mut afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_add_verb: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            verb: *const ::std::os::raw::c_char,
            info: *const ::std::os::raw::c_char,
            callback: afb_req_callback_x4_t,
            vcbdata: *mut ::std::os::raw::c_void,
            auth: *const afb_auth,
            session: u32,
            glob: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_del_verb: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            verb: *const ::std::os::raw::c_char,
            vcbdata: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_seal: ::std::option::Option<unsafe extern "C" fn(api: afb_api_x4_t)>,
    pub api_set_verbs: ::std::option::Option<
        unsafe extern "C" fn(api: afb_api_x4_t, verbs: *const afb_verb_v4) -> ::std::os::raw::c_int,
    >,
    pub api_require_api: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            name: *const ::std::os::raw::c_char,
            initialized: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_class_provide: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_class_require: ::std::option::Option<
        unsafe extern "C" fn(
            api: afb_api_x4_t,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub api_delete:
        ::std::option::Option<unsafe extern "C" fn(api: afb_api_x4_t) -> ::std::os::raw::c_int>,
    pub create_api: ::std::option::Option<
        unsafe extern "C" fn(
            root: afb_api_x4_t,
            newapi: *mut afb_api_x4_t,
            apiname: *const ::std::os::raw::c_char,
            info: *const ::std::os::raw::c_char,
            noconcurrency: ::std::os::raw::c_int,
            mainctl: afb_api_callback_x4_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub job_post: ::std::option::Option<
        unsafe extern "C" fn(
            root: afb_api_x4_t,
            delayms: ::std::os::raw::c_long,
            timeout: ::std::os::raw::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    signum: ::std::os::raw::c_int,
                    arg: *mut ::std::os::raw::c_void,
                ),
            >,
            argument: *mut ::std::os::raw::c_void,
            group: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub alias_api: ::std::option::Option<
        unsafe extern "C" fn(
            root: afb_api_x4_t,
            name: *const ::std::os::raw::c_char,
            as_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub setup_shared_object: ::std::option::Option<
        unsafe extern "C" fn(
            root: afb_api_x4_t,
            handle: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub type_opaque: afb_type_x4_t,
    pub type_stringz: afb_type_x4_t,
    pub type_json: afb_type_x4_t,
    pub type_json_c: afb_type_x4_t,
    pub type_bool: afb_type_x4_t,
    pub type_i32: afb_type_x4_t,
    pub type_u32: afb_type_x4_t,
    pub type_i64: afb_type_x4_t,
    pub type_u64: afb_type_x4_t,
    pub type_double: afb_type_x4_t,
    pub evfd_create: ::std::option::Option<
        unsafe extern "C" fn(
            efd: *mut afb_evfd_x4_t,
            fd: ::std::os::raw::c_int,
            events: u32,
            handler: afb_evfd_handler_x4_t,
            closure: *mut ::std::os::raw::c_void,
            autounref: ::std::os::raw::c_int,
            autoclose: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub evfd_addref:
        ::std::option::Option<unsafe extern "C" fn(efd: afb_evfd_x4_t) -> afb_evfd_x4_t>,
    pub evfd_unref: ::std::option::Option<unsafe extern "C" fn(efd: afb_evfd_x4_t)>,
    pub evfd_get_fd:
        ::std::option::Option<unsafe extern "C" fn(efd: afb_evfd_x4_t) -> ::std::os::raw::c_int>,
    pub evfd_get_events: ::std::option::Option<unsafe extern "C" fn(efd: afb_evfd_x4_t) -> u32>,
    pub evfd_set_events:
        ::std::option::Option<unsafe extern "C" fn(efd: afb_evfd_x4_t, events: u32)>,
    pub timer_create: ::std::option::Option<
        unsafe extern "C" fn(
            timer: *mut afb_timer_x4_t,
            absolute: ::std::os::raw::c_int,
            start_sec: time_t,
            start_ms: ::std::os::raw::c_uint,
            count: ::std::os::raw::c_uint,
            period_ms: ::std::os::raw::c_uint,
            accuracy_ms: ::std::os::raw::c_uint,
            handler: afb_timer_handler_x4_t,
            closure: *mut ::std::os::raw::c_void,
            autounref: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub timer_addref:
        ::std::option::Option<unsafe extern "C" fn(timer: afb_timer_x4_t) -> afb_timer_x4_t>,
    pub timer_unref: ::std::option::Option<unsafe extern "C" fn(timer: afb_timer_x4_t)>,
    pub req_session_get_LOA:
        ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t) -> ::std::os::raw::c_uint>,
    pub data_dependency_add: ::std::option::Option<
        unsafe extern "C" fn(
            from_data: afb_data_x4_t,
            to_data: afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_dependency_sub: ::std::option::Option<
        unsafe extern "C" fn(
            from_data: afb_data_x4_t,
            to_data: afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_dependency_drop_all: ::std::option::Option<unsafe extern "C" fn(data: afb_data_x4_t)>,
    pub req_cookie_set: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            value: *mut ::std::os::raw::c_void,
            freecb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            freeclo: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_cookie_get: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            value: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_cookie_getinit: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            value: *mut *mut ::std::os::raw::c_void,
            initcb: ::std::option::Option<
                unsafe extern "C" fn(
                    closure: *mut ::std::os::raw::c_void,
                    value: *mut *mut ::std::os::raw::c_void,
                    freecb: *mut ::std::option::Option<
                        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
                    >,
                    freeclo: *mut *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            closure: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_cookie_drop:
        ::std::option::Option<unsafe extern "C" fn(req: afb_req_x4_t) -> ::std::os::raw::c_int>,
    pub type_bytearray: afb_type_x4_t,
    pub req_param_convert: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            index: ::std::os::raw::c_uint,
            type_: afb_type_x4_t,
            result: *mut afb_data_x4_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_interface_by_id: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            id: ::std::os::raw::c_int,
            result: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_interface_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            name: *const ::std::os::raw::c_char,
            result: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_get_userdata: ::std::option::Option<
        unsafe extern "C" fn(req: afb_req_x4_t) -> *mut ::std::os::raw::c_void,
    >,
    pub req_set_userdata: ::std::option::Option<
        unsafe extern "C" fn(
            req: afb_req_x4_t,
            userdata: *mut ::std::os::raw::c_void,
            freecb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub job_abort: ::std::option::Option<
        unsafe extern "C" fn(
            root: afb_api_x4_t,
            jobid: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type afb_api_t = afb_api_x4_t;
pub type afb_req_t = afb_req_x4_t;
pub type afb_event_t = afb_event_x4_t;
pub type afb_data_t = afb_data_x4_t;
pub type afb_type_t = afb_type_x4_t;
pub type afb_evfd_t = afb_evfd_x4_t;
pub type afb_timer_t = afb_timer_x4_t;
pub use self::afb_type_flags_x4_t as afb_type_flags_t;
pub type afb_type_converter_t = afb_type_converter_x4_t;
pub type afb_type_updater_t = afb_type_updater_x4_t;
pub type afb_api_callback_t = afb_api_callback_x4_t;
pub type afb_req_callback_t = afb_req_callback_x4_t;
pub type afb_call_callback_t = afb_call_callback_x4_t;
pub type afb_subcall_callback_t = afb_subcall_callback_x4_t;
pub type afb_check_callback_t = afb_check_callback_x4_t;
pub type afb_event_handler_t = afb_event_handler_x4_t;
pub type afb_evfd_handler_t = afb_evfd_handler_x4_t;
pub type afb_timer_handler_t = afb_timer_handler_x4_t;
extern "C" {
    pub static mut afbBindingV4root: afb_api_t;
}
extern "C" {
    pub static mut afbBindingV4r1_itfptr: *const afb_binding_x4r1_itf;
}
pub const afbBindingV4_itf_revision: ::std::os::raw::c_short = 5;
extern "C" {
    pub fn afb_data_is_valid(data: afb_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_create_data_raw(
        data: *mut afb_data_t,
        type_: afb_type_t,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        dispose: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_create_data_alloc(
        data: *mut afb_data_t,
        type_: afb_type_t,
        pointer: *mut *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_create_data_copy(
        data: *mut afb_data_t,
        type_: afb_type_t,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_addref(data: afb_data_t) -> afb_data_t;
}
extern "C" {
    pub fn afb_data_unref(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_convert(
        data: afb_data_t,
        type_: afb_type_t,
        result: *mut afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_type(data: afb_data_t) -> afb_type_t;
}
extern "C" {
    pub fn afb_data_get_mutable(
        data: afb_data_t,
        pointer: *mut *mut ::std::os::raw::c_void,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_get_constant(
        data: afb_data_t,
        pointer: *mut *mut ::std::os::raw::c_void,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_size(data: afb_data_t) -> usize;
}
extern "C" {
    pub fn afb_data_ro_pointer(data: afb_data_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn afb_data_rw_pointer(data: afb_data_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn afb_data_notify_changed(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_is_volatile(data: afb_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_set_volatile(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_set_not_volatile(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_is_constant(data: afb_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_set_constant(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_set_not_constant(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_lock_read(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_try_lock_read(data: afb_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_lock_write(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_try_lock_write(data: afb_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_unlock(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_update(data: afb_data_t, value: afb_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_assign(data: *mut afb_data_t, value: afb_data_t);
}
extern "C" {
    pub fn afb_data_dependency_add(
        from_data: afb_data_t,
        to_data: afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_dependency_sub(
        from_data: afb_data_t,
        to_data: afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_data_dependency_drop_all(data: afb_data_t);
}
extern "C" {
    pub fn afb_data_array_addref(count: ::std::os::raw::c_uint, array: *const afb_data_t);
}
extern "C" {
    pub fn afb_data_array_unref(count: ::std::os::raw::c_uint, array: *const afb_data_t);
}
extern "C" {
    pub fn afb_data_array_convert(
        count: ::std::os::raw::c_uint,
        array_data: *const afb_data_t,
        array_type: *const afb_type_t,
        array_result: *mut afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_logmask(req: afb_req_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_wants_log_level(
        req: afb_req_t,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_is_valid(req: afb_req_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_get_api(req: afb_req_t) -> afb_api_t;
}
extern "C" {
    pub fn afb_req_get_vcbdata(req: afb_req_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn afb_req_get_called_api(req: afb_req_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn afb_req_get_called_verb(req: afb_req_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn afb_req_addref(req: afb_req_t) -> afb_req_t;
}
extern "C" {
    pub fn afb_req_unref(req: afb_req_t);
}
extern "C" {
    pub fn afb_req_vverbose(
        req: afb_req_t,
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn afb_req_verbose(
        req: afb_req_t,
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn afb_req_context(
        req: afb_req_t,
        ptrval: *mut *mut ::std::os::raw::c_void,
        initcb: ::std::option::Option<
            unsafe extern "C" fn(
                closure: *mut ::std::os::raw::c_void,
                value: *mut *mut ::std::os::raw::c_void,
                freecb: *mut ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
                >,
                freeclo: *mut *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_context_get(
        req: afb_req_t,
        ptrval: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_context_set(
        req: afb_req_t,
        value: *mut ::std::os::raw::c_void,
        freecb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        freeclo: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_context_drop(req: afb_req_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_session_close(req: afb_req_t);
}
extern "C" {
    pub fn afb_req_session_set_LOA(
        req: afb_req_t,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_session_get_LOA(req: afb_req_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn afb_req_subscribe(req: afb_req_t, event: afb_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_unsubscribe(req: afb_req_t, event: afb_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_check_permission(
        req: afb_req_t,
        permission: *const ::std::os::raw::c_char,
        callback: afb_check_callback_t,
        closure: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn afb_req_get_client_info(req: afb_req_t) -> *mut json_object;
}
extern "C" {
    pub fn afb_req_parameters(
        req: afb_req_t,
        params: *mut *const afb_data_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn afb_req_param_convert(
        req: afb_req_t,
        index: ::std::os::raw::c_uint,
        type_: afb_type_t,
        result: *mut afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_reply(
        req: afb_req_t,
        status: ::std::os::raw::c_int,
        nreplies: ::std::os::raw::c_uint,
        replies: *const afb_data_t,
    );
}
extern "C" {
    pub fn afb_req_subcall(
        req: afb_req_t,
        apiname: *const ::std::os::raw::c_char,
        verbname: *const ::std::os::raw::c_char,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
        flags: ::std::os::raw::c_int,
        callback: afb_subcall_callback_t,
        closure: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn afb_req_subcall_sync(
        req: afb_req_t,
        apiname: *const ::std::os::raw::c_char,
        verbname: *const ::std::os::raw::c_char,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
        flags: ::std::os::raw::c_int,
        status: *mut ::std::os::raw::c_int,
        nreplies: *mut ::std::os::raw::c_uint,
        replies: *mut afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_get_interface_by_id(
        req: afb_req_t,
        itfid: ::std::os::raw::c_int,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_get_interface_by_name(
        req: afb_req_t,
        name: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_req_get_userdata(req: afb_req_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn afb_req_set_userdata(
        req: afb_req_t,
        userdata: *mut ::std::os::raw::c_void,
        freecb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn afb_event_is_valid(event: afb_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_event_addref(event: afb_event_t) -> afb_event_t;
}
extern "C" {
    pub fn afb_event_unref(event: afb_event_t);
}
extern "C" {
    pub fn afb_event_name(event: afb_event_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn afb_event_push(
        event: afb_event_t,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_event_broadcast(
        event: afb_event_t,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_lookup(
        type_: *mut afb_type_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_register(
        type_: *mut afb_type_t,
        name: *const ::std::os::raw::c_char,
        flags: afb_type_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_name(type_: afb_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn afb_type_set_family(type_: afb_type_t, family: afb_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_add_convert_to(
        type_: afb_type_t,
        to_type: afb_type_t,
        converter: afb_type_converter_t,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_add_convert_from(
        type_: afb_type_t,
        from_type: afb_type_t,
        converter: afb_type_converter_t,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_add_update_to(
        type_: afb_type_t,
        to_type: afb_type_t,
        updater: afb_type_updater_t,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_type_add_update_from(
        type_: afb_type_t,
        from_type: afb_type_t,
        updater: afb_type_updater_t,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_logmask(api: afb_api_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_name(api: afb_api_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn afb_api_get_userdata(api: afb_api_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn afb_api_set_userdata(
        api: afb_api_t,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn afb_api_wants_log_level(
        api: afb_api_t,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_vverbose(
        api: afb_api_t,
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn afb_api_verbose(
        api: afb_api_t,
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn afb_api_broadcast_event(
        api: afb_api_t,
        name: *const ::std::os::raw::c_char,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_require_api(
        api: afb_api_t,
        name: *const ::std::os::raw::c_char,
        initialized: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_new_event(
        api: afb_api_t,
        name: *const ::std::os::raw::c_char,
        event: *mut afb_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_add_verb(
        api: afb_api_t,
        verb: *const ::std::os::raw::c_char,
        info: *const ::std::os::raw::c_char,
        callback: afb_req_callback_t,
        vcbdata: *mut ::std::os::raw::c_void,
        auth: *const afb_auth,
        session: u32,
        glob: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_del_verb(
        api: afb_api_t,
        verb: *const ::std::os::raw::c_char,
        vcbdata: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_seal(api: afb_api_t);
}
extern "C" {
    pub fn afb_api_set_verbs(api: afb_api_t, verbs: *const afb_verb_v4) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_event_handler_add(
        api: afb_api_t,
        pattern: *const ::std::os::raw::c_char,
        callback: afb_event_handler_t,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_event_handler_del(
        api: afb_api_t,
        pattern: *const ::std::os::raw::c_char,
        closure: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_call(
        api: afb_api_t,
        apiname: *const ::std::os::raw::c_char,
        verbname: *const ::std::os::raw::c_char,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
        callback: afb_call_callback_t,
        closure: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn afb_api_call_sync(
        api: afb_api_t,
        apiname: *const ::std::os::raw::c_char,
        verbname: *const ::std::os::raw::c_char,
        nparams: ::std::os::raw::c_uint,
        params: *const afb_data_t,
        status: *mut ::std::os::raw::c_int,
        nreplies: *mut ::std::os::raw::c_uint,
        replies: *mut afb_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_provide_class(
        api: afb_api_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_require_class(
        api: afb_api_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_delete(api: afb_api_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_api_settings(api: afb_api_t) -> *mut json_object;
}
extern "C" {
    pub fn afb_create_api(
        newapi: *mut afb_api_t,
        apiname: *const ::std::os::raw::c_char,
        info: *const ::std::os::raw::c_char,
        noconcurrency: ::std::os::raw::c_int,
        mainctl: afb_api_callback_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_job_post(
        delayms: ::std::os::raw::c_long,
        timeout: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(signum: ::std::os::raw::c_int, arg: *mut ::std::os::raw::c_void),
        >,
        argument: *mut ::std::os::raw::c_void,
        group: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_job_abort(jobid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_alias_api(
        name: *const ::std::os::raw::c_char,
        as_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_setup_shared_object(
        api: afb_api_t,
        handle: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_evfd_create(
        efd: *mut afb_evfd_t,
        fd: ::std::os::raw::c_int,
        events: u32,
        handler: afb_evfd_handler_t,
        closure: *mut ::std::os::raw::c_void,
        autounref: ::std::os::raw::c_int,
        autoclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_evfd_addref(efd: afb_evfd_t) -> afb_evfd_t;
}
extern "C" {
    pub fn afb_evfd_unref(efd: afb_evfd_t);
}
extern "C" {
    pub fn afb_evfd_get_fd(efd: afb_evfd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_evfd_get_events(efd: afb_evfd_t) -> u32;
}
extern "C" {
    pub fn afb_evfd_set_events(efd: afb_evfd_t, events: u32);
}
extern "C" {
    pub fn afb_timer_create(
        timer: *mut afb_timer_t,
        absolute: ::std::os::raw::c_int,
        start_sec: time_t,
        start_ms: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        period_ms: ::std::os::raw::c_uint,
        accuracy_ms: ::std::os::raw::c_uint,
        handler: afb_timer_handler_t,
        closure: *mut ::std::os::raw::c_void,
        autounref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_timer_addref(timer: afb_timer_t) -> afb_timer_t;
}
extern "C" {
    pub fn afb_timer_unref(timer: afb_timer_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_verb_v4 {
    pub verb: *const ::std::os::raw::c_char,
    pub callback: afb_req_callback_x4_t,
    pub auth: *const afb_auth,
    pub info: *const ::std::os::raw::c_char,
    pub vcbdata: *mut ::std::os::raw::c_void,
    pub session: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
impl afb_verb_v4 {
    #[inline]
    pub fn glob(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_glob(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(glob: u16) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let glob: u16 = unsafe { ::std::mem::transmute(glob) };
            glob as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct afb_binding_v4 {
    pub api: *const ::std::os::raw::c_char,
    pub specification: *const ::std::os::raw::c_char,
    pub info: *const ::std::os::raw::c_char,
    pub verbs: *const afb_verb_v4,
    pub mainctl: afb_api_callback_x4_t,
    pub userdata: *mut ::std::os::raw::c_void,
    pub provide_class: *const ::std::os::raw::c_char,
    pub require_class: *const ::std::os::raw::c_char,
    pub require_api: *const ::std::os::raw::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl afb_binding_v4 {
    #[inline]
    pub fn noconcurrency(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_noconcurrency(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        noconcurrency: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let noconcurrency: u32 = unsafe { ::std::mem::transmute(noconcurrency) };
            noconcurrency as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static afbBindingV4: afb_binding_v4;
}
extern "C" {
    pub fn afb_get_logmask() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn afb_verbose(
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
pub const afb_epoll_epoll_IN: afb_epoll = 1;
pub const afb_epoll_epoll_OUT: afb_epoll = 4;
pub const afb_epoll_epoll_HUP: afb_epoll = 16;
pub const afb_epoll_epoll_RDH: afb_epoll = 8192;
pub const afb_epoll_epoll_ERR: afb_epoll = 8;
pub type afb_epoll = ::std::os::raw::c_uint;
pub use self::afb_epoll as afb_epoll_t;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
